name: EMADL2CPP_ranges_handler
on:
  push:
    paths:
      - 'monticore/EmbeddedMontiArc/generators/EMADL2CPP/ranges_handler/**'
  workflow_dispatch:
env:
  CI_PROJECT_ID : 17712
  CI_API_V4_URL : https://git.rwth-aachen.de/api/v4
  GITLABTOKEN : ${{ secrets.GITLABTOKEN }}
jobs:
  FileChanges:
    runs-on: ubuntu-latest
    outputs:
      runbuildDockerMXNet150: ${{steps.buildDockerMXNet150.outputs.run}}
      runbuildDockerMXNet170: ${{steps.buildDockerMXNet170.outputs.run}}
      runbuildDockerMXNet170onnx: ${{steps.buildDockerMXNet170onnx.outputs.run}}
      runbuildDockerTensorflowONNX: ${{steps.buildDockerTensorflowONNX.outputs.run}}
      runbuildDockerMXNet170DGL: ${{steps.buildDockerMXNet170DGL.outputs.run}}
      runbuildDockerDGLQD: ${{steps.buildDockerDGLQD.outputs.run}}
      runbuildDockerPyTorch: ${{steps.buildDockerPyTorch.outputs.run}}
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Check for file changes
        run: |
          CHANGES=$(git diff --name-only HEAD^ HEAD)
          echo "$CHANGES"
          echo "$CHANGES" > diff.txt
      - name: Check buildDockerMXNet150
        id: buildDockerMXNet150
        run: |
          run=false
          if cat diff.txt | grep '^src/test/resources/docker/mxnet150'; then
            echo "RUN"
            run=true
          else
            echo "DONT RUN"
          fi
          echo "run=$run" >> $GITHUB_OUTPUT
      - name: Check buildDockerMXNet170
        id: buildDockerMXNet170
        run: |
          run=false
          if cat diff.txt | grep '^src/test/resources/docker/mxnet170'; then
            echo "RUN"
            run=true
          else
            echo "DONT RUN"
          fi
          echo "run=$run" >> $GITHUB_OUTPUT
      - name: Check buildDockerMXNet170onnx
        id: buildDockerMXNet170onnx
        run: |
          run=false
          if cat diff.txt | grep '^src/test/resources/docker/mxnet170'; then
            echo "RUN"
            run=true
          else
            echo "DONT RUN"
          fi
          echo "run=$run" >> $GITHUB_OUTPUT
      - name: Check buildDockerTensorflowONNX
        id: buildDockerTensorflowONNX
        run: |
          run=false
          if cat diff.txt | grep '^src/test/resources/docker/tensorflow'; then
            echo "RUN"
            run=true
          else
            echo "DONT RUN"
          fi
          echo "run=$run" >> $GITHUB_OUTPUT
      - name: Check buildDockerMXNet170DGL
        id: buildDockerMXNet170DGL
        run: |
          run=false
          if cat diff.txt | grep '^src/test/resources/docker/mxnet170'; then
            echo "RUN"
            run=true
          else
            echo "DONT RUN"
          fi
          echo "run=$run" >> $GITHUB_OUTPUT
      - name: Check buildDockerDGLQD
        id: buildDockerDGLQD
        run: |
          run=false
          if cat diff.txt | grep '^src/test/resources/docker/dglqd'; then
            echo "RUN"
            run=true
          else
            echo "DONT RUN"
          fi
          echo "run=$run" >> $GITHUB_OUTPUT
      - name: Check buildDockerPyTorch
        id: buildDockerPyTorch
        run: |
          run=false
          if cat diff.txt | grep '^src/test/resources/docker/pytorch'; then
            echo "RUN"
            run=true
          else
            echo "DONT RUN"
          fi
          echo "run=$run" >> $GITHUB_OUTPUT
  docker_phase:
    needs: [buildDockerMXNet170DGL, buildDockerMXNet170, buildDockerDGLQD, buildDockerMXNet150, buildDockerTensorflowONNX, buildDockerMXNet170onnx, buildDockerPyTorch]
    if: ${{ !cancelled()}}
    runs-on: ubuntu-latest
    steps:
        - run: |
            echo "Finished stage docker"
          if: ${{!contains(needs.*.result, 'failure')}}
        - run: |
            echo "Failed stage docker"
            exit 1
          if: ${{contains(needs.*.result, 'failure')}}
  linux_phase:
    needs: [docker_phase, integrationPythonWrapperTest, integrationMXNetJobLinux, integrationTensorflowJobLinux, UnitTestJobLinux, integrationCaffe2JobLinux, integrationGluonJobLinux]
    if: ${{ !cancelled()}}
    runs-on: ubuntu-latest
    steps:
        - run: |
            echo "Finished stage linux"
          if: ${{!contains(needs.*.result, 'failure')}}
        - run: |
            echo "Failed stage linux"
            exit 1
          if: ${{contains(needs.*.result, 'failure')}}

  integrationMXNetJobLinux:
    needs: docker_phase
    if: ${{ !cancelled() && !contains(needs.*.result, 'failure') }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Restore large files
        run: |
          ls
          find . -type f -name '*.part*' | sort | while read part; do
          echo "Restoring $part"
          base=$(echo "$part" | sed 's/.part.*//')
          cat "$part" >> "$base"
          rm "$part"
          done
      - name: Start Docker Container
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          docker pull ghcr.io/davidblm/dockerimages/mxnet150:v0.0.5
          docker run --name build-container -d -v $(pwd):/workspace --network=host  -e CI_API_V4_URL=$CI_API_V4_URL -e GITLABTOKEN=${{ secrets.GITLABTOKEN }} ghcr.io/davidblm/dockerimages/mxnet150:v0.0.5 tail -f /dev/null
      - name: Script
        continue-on-error: true
        env:
          SCRIPT: |
            cd /workspace
            cd monticore/EmbeddedMontiArc/generators/EMADL2CPP/ranges_handler
            mvn -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -B  -U clean install --settings settings.xml -Dtest=IntegrationMXNetTest -Dmaven.wagon.http.retryHandler.count=50 -Dmaven.wagon.http.connectionTimeout=6000000 -Dmaven.wagon.http.readTimeout=600000000
        run: docker exec build-container bash -c "$SCRIPT"

  integrationCaffe2JobLinux:
    needs: docker_phase
    if: ${{ !cancelled() && !contains(needs.*.result, 'failure') }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Restore large files
        run: |
          ls
          find . -type f -name '*.part*' | sort | while read part; do
          echo "Restoring $part"
          base=$(echo "$part" | sed 's/.part.*//')
          cat "$part" >> "$base"
          rm "$part"
          done
      - name: Start Docker Container
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          docker pull ghcr.io/davidblm/integrationtests/caffe2:v0.0.5
          docker run --name build-container -d -v $(pwd):/workspace --network=host  -e CI_API_V4_URL=$CI_API_V4_URL -e GITLABTOKEN=${{ secrets.GITLABTOKEN }} ghcr.io/davidblm/integrationtests/caffe2:v0.0.5 tail -f /dev/null
      - name: Script
        env:
          SCRIPT: |
            cd /workspace
            cd monticore/EmbeddedMontiArc/generators/EMADL2CPP/ranges_handler
            mvn -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -B  -U clean install --settings settings.xml -Dtest=IntegrationCaffe2Test -Dmaven.wagon.http.retryHandler.count=50 -Dmaven.wagon.http.connectionTimeout=6000000 -Dmaven.wagon.http.readTimeout=600000000
        run: docker exec build-container bash -c "$SCRIPT"

  integrationGluonJobLinux:
    needs: docker_phase
    if: ${{ !cancelled() && !contains(needs.*.result, 'failure') }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Restore large files
        run: |
          ls
          find . -type f -name '*.part*' | sort | while read part; do
          echo "Restoring $part"
          base=$(echo "$part" | sed 's/.part.*//')
          cat "$part" >> "$base"
          rm "$part"
          done
      - name: Start Docker Container
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          docker pull ghcr.io/davidblm/dockerimages/mxnet170:v0.0.1
          docker run --name build-container -d -v $(pwd):/workspace --network=host  -e CI_API_V4_URL=$CI_API_V4_URL -e GITLABTOKEN=${{ secrets.GITLABTOKEN }} ghcr.io/davidblm/dockerimages/mxnet170:v0.0.1 tail -f /dev/null
      - name: Script
        env:
          SCRIPT: |
            cd /workspace
            cd monticore/EmbeddedMontiArc/generators/EMADL2CPP/ranges_handler
            ln /usr/bin/python3 /usr/bin/python -f
            python -m pip install -U pip
            python -m pip install scikit-image
            python -m pip install opencv-python
            mvn -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -B -U clean install --settings settings.xml -Dtest=IntegrationGluonTest -Dmaven.wagon.http.retryHandler.count=50 -Dmaven.wagon.http.connectionTimeout=6000000 -Dmaven.wagon.http.readTimeout=600000000
        run: docker exec build-container bash -c "$SCRIPT"
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integrationGluonJobLinux
          retention-days: 7
          path: |
            monticore/EmbeddedMontiArc/generators/EMADL2CPP/ranges_handler/target

  integrationTensorflowJobLinux:
    needs: docker_phase
    if: ${{ !cancelled() && !contains(needs.*.result, 'failure') }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Restore large files
        run: |
          ls
          find . -type f -name '*.part*' | sort | while read part; do
          echo "Restoring $part"
          base=$(echo "$part" | sed 's/.part.*//')
          cat "$part" >> "$base"
          rm "$part"
          done
      - name: Start Docker Container
        run: |
          docker pull registry.git.rwth-aachen.de/monticore/embeddedmontiarc/generators/emadl2cpp/integrationtests/tensorflow
          docker run --name build-container -d -v $(pwd):/workspace --network=host  -e CI_API_V4_URL=$CI_API_V4_URL -e GITLABTOKEN=${{ secrets.GITLABTOKEN }} registry.git.rwth-aachen.de/monticore/embeddedmontiarc/generators/emadl2cpp/integrationtests/tensorflow tail -f /dev/null
      - name: Script
        env:
          SCRIPT: |
            cd /workspace
            cd monticore/EmbeddedMontiArc/generators/EMADL2CPP/ranges_handler
            mvn -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -B -U clean install --settings settings.xml -Dtest=IntegrationTensorflowTest -Dmaven.wagon.http.retryHandler.count=50 -Dmaven.wagon.http.connectionTimeout=6000000 -Dmaven.wagon.http.readTimeout=600000000
        run: docker exec build-container bash -c "$SCRIPT"

  integrationPythonWrapperTest:
    needs: docker_phase
    if: ${{ !cancelled() && !contains(needs.*.result, 'failure') }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Restore large files
        run: |
          ls
          find . -type f -name '*.part*' | sort | while read part; do
          echo "Restoring $part"
          base=$(echo "$part" | sed 's/.part.*//')
          cat "$part" >> "$base"
          rm "$part"
          done
      - name: Start Docker Container
        run: |
          docker pull registry.git.rwth-aachen.de/monticore/embeddedmontiarc/generators/emadl2pythonwrapper/tests/mvn-swig:latest
          docker run --name build-container -d -v $(pwd):/workspace --network=host  -e CI_API_V4_URL=$CI_API_V4_URL -e GITLABTOKEN=${{ secrets.GITLABTOKEN }} registry.git.rwth-aachen.de/monticore/embeddedmontiarc/generators/emadl2pythonwrapper/tests/mvn-swig:latest tail -f /dev/null
      - name: Script
        env:
          SCRIPT: |
            cd /workspace
            cd monticore/EmbeddedMontiArc/generators/EMADL2CPP/ranges_handler
            mvn -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -B -U  clean install --settings settings.xml -Dtest=IntegrationPythonWrapperTest -Dmaven.wagon.http.retryHandler.count=50 -Dmaven.wagon.http.connectionTimeout=6000000 -Dmaven.wagon.http.readTimeout=600000000
        run: docker exec build-container bash -c "$SCRIPT"
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integrationPythonWrapperTest
          retention-days: 7
          path: |
            monticore/EmbeddedMontiArc/generators/EMADL2CPP/ranges_handler/target

  UnitTestJobLinux:
    needs: docker_phase
    if: ${{ !cancelled() && !contains(needs.*.result, 'failure') }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Restore large files
        run: |
          ls
          find . -type f -name '*.part*' | sort | while read part; do
          echo "Restoring $part"
          base=$(echo "$part" | sed 's/.part.*//')
          cat "$part" >> "$base"
          rm "$part"
          done
      - name: Start Docker Container
        run: |
          docker pull registry.git.rwth-aachen.de/monticore/embeddedmontiarc/applications/gans/mnist-infogan/gans_mxnet:latest
          docker run --name build-container -d -v $(pwd):/workspace --network=host  -e CI_API_V4_URL=$CI_API_V4_URL -e GITLABTOKEN=${{ secrets.GITLABTOKEN }} registry.git.rwth-aachen.de/monticore/embeddedmontiarc/applications/gans/mnist-infogan/gans_mxnet:latest tail -f /dev/null
      - name: Script
        env:
          SCRIPT: |
            cd /workspace
            cd monticore/EmbeddedMontiArc/generators/EMADL2CPP/ranges_handler
            mvn -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -B -U clean install --settings settings.xml -Dtest="GenerationTest,SymtabTest*" -Dmaven.wagon.http.retryHandler.count=50 -Dmaven.wagon.http.connectionTimeout=6000000 -Dmaven.wagon.http.readTimeout=600000000
        run: docker exec build-container bash -c "$SCRIPT"
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: UnitTestJobLinux
          retention-days: 7
          path: |
            monticore/EmbeddedMontiArc/generators/EMADL2CPP/ranges_handler/target

  buildDockerMXNet150:
    needs: FileChanges
    if: ${{needs.FileChanges.outputs.runbuildDockerMXNet150 == 'true'}}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Restore large files
        run: |
          ls
          find . -type f -name '*.part*' | sort | while read part; do
          echo "Restoring $part"
          base=$(echo "$part" | sed 's/.part.*//')
          cat "$part" >> "$base"
          rm "$part"
          done
      - name: Script
        run: |
          cd monticore/EmbeddedMontiArc/generators/EMADL2CPP/ranges_handler
          cd src/test/resources/docker/mxnet150

  buildDockerMXNet170:
    needs: FileChanges
    if: ${{needs.FileChanges.outputs.runbuildDockerMXNet170 == 'true'}}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Restore large files
        run: |
          ls
          find . -type f -name '*.part*' | sort | while read part; do
          echo "Restoring $part"
          base=$(echo "$part" | sed 's/.part.*//')
          cat "$part" >> "$base"
          rm "$part"
          done
      - name: Script
        run: |
          cd monticore/EmbeddedMontiArc/generators/EMADL2CPP/ranges_handler
          cd src/test/resources/docker/mxnet170

  buildDockerMXNet170onnx:
    needs: FileChanges
    if: ${{needs.FileChanges.outputs.runbuildDockerMXNet170onnx == 'true'}}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Restore large files
        run: |
          ls
          find . -type f -name '*.part*' | sort | while read part; do
          echo "Restoring $part"
          base=$(echo "$part" | sed 's/.part.*//')
          cat "$part" >> "$base"
          rm "$part"
          done
      - name: Script
        run: |
          cd monticore/EmbeddedMontiArc/generators/EMADL2CPP/ranges_handler
          cd src/test/resources/docker/mxnet170

  buildDockerTensorflowONNX:
    needs: FileChanges
    if: ${{needs.FileChanges.outputs.runbuildDockerTensorflowONNX == 'true'}}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Restore large files
        run: |
          ls
          find . -type f -name '*.part*' | sort | while read part; do
          echo "Restoring $part"
          base=$(echo "$part" | sed 's/.part.*//')
          cat "$part" >> "$base"
          rm "$part"
          done
      - name: Script
        run: |
          cd monticore/EmbeddedMontiArc/generators/EMADL2CPP/ranges_handler
          cd src/test/resources/docker/tensorflow
          docker login registry.git.rwth-aachen.de -u someUserName -p glpat--9siQV_pCkA2wFRqeDhf
          docker build -t registry.git.rwth-aachen.de/monticore/embeddedmontiarc/generators/emadl2cpp/dockerimages/tensorflow-onnx -f Dockerfile-onnx .
          docker push registry.git.rwth-aachen.de/monticore/embeddedmontiarc/generators/emadl2cpp/dockerimages/tensorflow-onnx

  buildDockerMXNet170DGL:
    needs: FileChanges
    if: ${{needs.FileChanges.outputs.runbuildDockerMXNet170DGL == 'true'}}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Restore large files
        run: |
          ls
          find . -type f -name '*.part*' | sort | while read part; do
          echo "Restoring $part"
          base=$(echo "$part" | sed 's/.part.*//')
          cat "$part" >> "$base"
          rm "$part"
          done
      - name: Script
        run: |
          cd monticore/EmbeddedMontiArc/generators/EMADL2CPP/ranges_handler
          cd src/test/resources/docker/mxnet170
          docker login registry.git.rwth-aachen.de -u someUserName -p glpat--9siQV_pCkA2wFRqeDhf
          docker build -t registry.git.rwth-aachen.de/monticore/embeddedmontiarc/generators/emadl2cpp/dockerimages/mxnet170-dgl:v0.0.1 -f Dockerfile-dgl .
          docker push registry.git.rwth-aachen.de/monticore/embeddedmontiarc/generators/emadl2cpp/dockerimages/mxnet170-dgl:v0.0.1

  buildDockerDGLQD:
    needs: FileChanges
    if: ${{needs.FileChanges.outputs.runbuildDockerDGLQD == 'true'}}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Restore large files
        run: |
          ls
          find . -type f -name '*.part*' | sort | while read part; do
          echo "Restoring $part"
          base=$(echo "$part" | sed 's/.part.*//')
          cat "$part" >> "$base"
          rm "$part"
          done
      - name: Script
        run: |
          cd monticore/EmbeddedMontiArc/generators/EMADL2CPP/ranges_handler
          cd src/test/resources/docker/dglqd
          docker login registry.git.rwth-aachen.de -u someUserName -p ${{ secrets.GITLABTOKEN }}
          docker build -t registry.git.rwth-aachen.de/monticore/embeddedmontiarc/generators/emadl2cpp/dockerimages/dgl-qd -f Dockerfile .
          docker push registry.git.rwth-aachen.de/monticore/embeddedmontiarc/generators/emadl2cpp/dockerimages/dgl-qd

  buildDockerPyTorch:
    needs: FileChanges
    if: ${{needs.FileChanges.outputs.runbuildDockerPyTorch == 'true'}}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Restore large files
        run: |
          ls
          find . -type f -name '*.part*' | sort | while read part; do
          echo "Restoring $part"
          base=$(echo "$part" | sed 's/.part.*//')
          cat "$part" >> "$base"
          rm "$part"
          done
      - name: Script
        run: |
          cd monticore/EmbeddedMontiArc/generators/EMADL2CPP/ranges_handler
          cd src/test/resources/docker/pytorch
          docker login registry.git.rwth-aachen.de -u someUserName -p ${{ secrets.GITLABTOKEN }}
          docker build -t registry.git.rwth-aachen.de/monticore/embeddedmontiarc/generators/emadl2cpp/dockerimages/pytorch -f Dockerfile .
          docker push registry.git.rwth-aachen.de/monticore/embeddedmontiarc/generators/emadl2cpp/dockerimages/pytorch

